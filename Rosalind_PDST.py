"""
Rosalind problem pdst: http://rosalind.info/problems/pdst/

Author: Michael Ayars

Given: A collection of n (n≤10) DNA strings s1,…,sn of equal length (at most 1 kbp). Strings are given in FASTA format.

Return: The matrix D corresponding to the p-distance dp on the given strings.
As always, note that your answer is allowed an absolute error of 0.001.
"""



from Bio import SeqIO

def compare_sequences(s1, s2):
"""
compares s1 and s2 DNA strings and returns distance (number of differences / length of s1)
""" 
    distance = 0.0

    for index, value in enumerate(s1):
        if s1[index] != s2[index]:
            distance += 1

    return distance/len(s1)

def gen_distance_matrix(sequences):
"""
sequences : list of DNA sequence strings

returns matrix of distances generated by compare_sequences on each pair of sequences in list.
"""


    w = len(sequences)

    distance_matrix = [[0 for x in range(w)] for y in range(w)]

    for idx_i,i in enumerate(sequences):
        for idx_j,j in enumerate(sequences):
            distance_matrix[idx_i][idx_j] = compare_sequences(i,j)
    
    return distance_matrix

if __name__ == "__main__":

    records = []

    for seq_record in SeqIO.parse('inputData/rosalind_input_PDST.txt', "fasta"):
        records.append(str(seq_record.seq))

    result = gen_distance_matrix(records)

    print('\n'.join([' '.join(['{0:.4f}'.format(item) for item in row]) for row in result]))
